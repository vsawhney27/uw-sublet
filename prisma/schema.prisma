generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String
  emailVerified     DateTime?
  verificationToken String?
  tokenExpiry       DateTime? @map("tokenExpiry")
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @default(USER)
  listings          Listing[]
  receivedMessages  Message[] @relation("ReceivedMessages")
  sentMessages      Message[] @relation("SentMessages")
  reports           Report[]  @relation("ReportedBy")
}

model Listing {
  id             String    @id @default(cuid())
  title          String
  description    String
  price          Float
  address        String
  bedrooms       Int
  bathrooms      Int
  availableFrom  DateTime
  availableUntil DateTime
  amenities      String[]
  images         String[]
  published      Boolean   @default(true)
  isDraft        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages       Message[]
  reports        Report[]

  // Room sublet specific fields
  isRoomSublet    Boolean @default(false)
  totalRoommates  Int?
  roomDetails     String?
  roommateGenders String? // "all-female" | "all-male" | "mixed"
  sharedSpaces    String?
}

model Message {
  id         String   @id @default(cuid())
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  receiverId String
  listingId  String?
  listing    Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Report {
  id         String       @id @default(cuid())
  reason     String
  details    String
  status     ReportStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  reporterId String
  listingId  String
  listing    Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reporter   User         @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}
